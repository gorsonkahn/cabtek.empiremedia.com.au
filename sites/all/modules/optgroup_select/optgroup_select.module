<?php

/**
 * @file
 * OptGroup Select widget for Select and term reference select.
 */

/**
 * Implements hook_field_widget_info().
 */
function optgroup_select_field_widget_info() {
  return array(
    'optgroup_select_taxonomy_autocomplete' => array(
      'label' => t('Optgroup Select'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'size' => 60,
        'autocomplete_path' => 'taxonomy/autocomplete',
        'mode' => 'single',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function optgroup_select_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Abstract over the actual field columns, to allow different field types to
  // reuse those widgets.
  $value_key = key($field['columns']);
  $type = str_replace('options_', '', $instance['widget']['type']);
  $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
  $required = $element['#required'];
  $has_value = isset($items[0][$value_key]);
  $properties = _options_properties($type, $multiple, $required, $has_value);
  // $entity_type = $element['#entity_type'].
  // $entity = $element['#entity'].
  $new_options = array();
  if ($type == 'optgroup_select_taxonomy_autocomplete') {

    $vocab_name = $field['settings']['allowed_values'][0]['vocabulary'];
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocab_name);

    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    $new_options = array();
    foreach ($terms as $options_key => $options_value) {
      if (is_numeric($options_key)) {
        $parents = taxonomy_get_parents($options_key);
        if (count($parents) == 0) {
          $children = taxonomy_get_children($options_key);
          if (count($children)) {
            foreach ($children as $term) {
              $new_options[$options_value->name][$term->tid] = $term->name;
            }
          }
        }
      }
    }
  }
  $default_tids = array();
  foreach ($items as $item) {
    $default_tids[] = $item['tid'];
  }
  switch ($type) {
    case 'optgroup_select_taxonomy_autocomplete':
      $element += array(
        '#type' => 'select',
        '#default_value' => $default_tids,
        // Do not display a 'multiple' select box if there is only one option.
        '#multiple' => $multiple && count($new_options) > 1,
        '#options' => $new_options,
        'add_more' => '',
      );
      break;
  }

  $element += array(
    '#value_key' => $value_key,
    '#element_validate' => array('optgroup_select_field_widget_validate'),
    '#properties' => $properties,
  );

  return $element;
}

/**
 * Form element validation handler for options element.
 */
function optgroup_select_field_widget_validate($element, &$form_state) {
  if ($element['#required'] && $element['#value'] == '_none') {
    form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
  }
  // Transpose selections from field => delta to delta => field, turning
  // multiple selected options into multiple parent elements.
  $items = _options_form_to_storage($element);
  form_set_value($element, $items, $form_state);
}
